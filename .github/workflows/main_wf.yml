# This is a basic workflow to help you get started with Actions

name: Main Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  workflow_run: 
    workflows: [Trigger Workflow]
    types: 
      - completed
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  main_CI_job:
    runs-on: ubuntu-latest
    environment: protected_branches

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Fetch Latest Changes
        run: git fetch origin
    
      # Mirror github to gitlab
      - name: mirror github
        run: |
          cd ..
          git clone "https://gitlab.icp.uni-stuttgart.de/icp/bibtex.git"
          echo "Cloned icp bibtex"
          echo "Getting the URL of the repo"
          GITLAB_REPO_URL=$(curl --header "PRIVATE-TOKEN: ${{ secrets.FULL_KEY }}" --silent "https://gitlab.icp.uni-stuttgart.de/api/v4/projects/950" | jq '.http_url_to_repo' | sed -e 's/http:\/\///' -e 's/https:\/\///' -e 's/"//g')
          echo "URL is https://${GITLAB_REPO_URL}"
          echo "adding gitlab-repo as remote"
          git remote add gitlab "https://full_key:${{ secrets.FULL_KEY }}@${GITLAB_REPO_URL}"
        # echo "GitLab URL: https://full_key:${{ secrets.FULL_KEY }}@${GITLAB_REPO_URL}" | base64
      
      # Add checkout to workflow commit
      - name: github checkout
        run: |
          git checkout ${{ github.event.workflow_run.head_sha }}
          git status
          
      - name: check remote
        run: |
          git remote -v
          git remote show origin
          sleep 3

      - name: push to gitlab
        run: |
          git push --force gitlab ${{ github.event.workflow_run.head_sha }}

      # Runs webhook to start gitlab pipeline
      - name: Trigger gitlab pipeline
        run: |
          echo ${{ github.event.workflow_run.head_sha }}
          curl -X POST --fail -F token=${{ secrets.ENV_TOKEN }} -F ref=main https://gitlab.icp.uni-stuttgart.de/api/v4/projects/950/trigger/pipeline
          
      - name: wait for gitlab pipeline
        run: |
          pipeline_id=$(curl https://gitlab.icp.uni-stuttgart.de/api/v4/projects/950/pipelines | jq '.[0].id')
          ci_status="pending"
          until [[ "$ci_status" != "pending" && "$ci_status" != "running" ]]
          do
             sleep 10
             ci_output=$(curl https://gitlab.icp.uni-stuttgart.de/api/v4/projects/950/pipelines/${pipeline_id})
             ci_status=$(jq -n "$ci_output" | jq -r .status)
             ci_web_url=$(jq -n "$ci_output" | jq -r .web_url)
             
             echo "Current pipeline status: ${ci_status}"
             if [ "$ci_status" = "running" ]
             then
               echo "Checking pipeline status..."
               curl -d '{"state":"pending", "target_url": "'${ci_web_url}'", "context": "gitlab-ci"}' -H "Authorization: token ${GITHUB_TOKEN}"  -H "Accept: application/vnd.github.antiope-preview+json" -X POST --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}"  > /dev/null 
             fi
          done

          echo "Pipeline finished with status ${ci_status}"
